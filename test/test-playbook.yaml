---
- hosts: localhost
  gather_facts: false
  vars:
    oc_cmd: oc
    anarchy_operator_namespace: anarchy-operator
    anarchy_operator_test_namespace: anarchy-operator-test
    anarchy_runner_replicas: 3
    build: false
    build_anarchy_runner: "{{ build }}"
    build_anarchy_operator: "{{ build }}"
    build_anarchy_operator_test: "{{ build }}"
    restart_anarchy_operator: "{{ build_anarchy_operator }}"
    restart_anarchy_runner: "{{ build_anarchy_runner }}"
    local_test: false
  tasks:
  - name: Get route for test api server
    k8s_facts:
      api_version: route.openshift.io/v1
      kind: Route
      name: anarchy-test-server
      namespace: "{{ anarchy_operator_test_namespace }}"
    register: r_get_test_api_server_route
    failed_when: not r_get_test_api_server_route.resources

  - name: Set fact test_api_server_hostname
    set_fact:
      test_api_server_hostname: >-
        {{ r_get_test_api_server_route.resources[0].spec.host }}

  - name: Start anarchy-runner build
    command: >-
      {{ oc_cmd }} start-build anarchy-runner
      -n {{ anarchy_operator_namespace | quote }}
      --from-dir {{ playbook_dir }}/..
    when: build_anarchy_runner | bool

  - name: Start anarchy-operator build
    command: >-
      {{ oc_cmd }} start-build anarchy-operator
      -n {{ anarchy_operator_namespace | quote }}
      --from-dir {{ playbook_dir }}/..
    when: build_anarchy_operator | bool

  - name: Start anarchy-test-server build
    command: >-
      {{ oc_cmd }} start-build anarchy-test-server
      -n {{ anarchy_operator_test_namespace | quote }}
      --from-dir {{ playbook_dir }}/..
    when: build_anarchy_operator_test | bool

  - when: build_anarchy_operator | bool
    block:
    - name: Get anachry-operator BuildConfig
      k8s_facts:
        api_version: build.openshift.io/v1
        kind: BuildConfig
        name: anarchy-operator
        namespace: "{{ anarchy_operator_namespace }}"
      register: anarchy_operator_buildconfig

    - name: Wait for anarchy-operator build
      k8s_facts:
        api_version: build.openshift.io/v1
        kind: Build
        name: anarchy-operator-{{ anarchy_operator_buildconfig.resources[0].status.lastVersion }}
        namespace: "{{ anarchy_operator_namespace }}"
      register: anarchy_operator_build
      until: anarchy_operator_build.resources[0].status.phase == 'Complete'
      retries: 30
      delay: 10

  - when: build_anarchy_operator | bool
    block:
    - name: Get anachry-runner BuildConfig
      k8s_facts:
        api_version: build.openshift.io/v1
        kind: BuildConfig
        name: anarchy-runner
        namespace: "{{ anarchy_operator_namespace }}"
      register: anarchy_runner_buildconfig

    - name: Wait for anarchy-runner build
      k8s_facts:
        api_version: build.openshift.io/v1
        kind: Build
        name: anarchy-runner-{{ anarchy_runner_buildconfig.resources[0].status.lastVersion }}
        namespace: "{{ anarchy_operator_namespace }}"
      register: anarchy_runner_build
      until: anarchy_runner_build.resources[0].status.phase == 'Complete'
      retries: 30
      delay: 10

  - when: build_anarchy_operator_test | bool
    block:
    - name: Wait for anachry-test-server build
      k8s_facts:
        api_version: build.openshift.io/v1
        kind: BuildConfig
        name: anarchy-test-server
        namespace: "{{ anarchy_operator_test_namespace }}"
      register: anarchy_operator_test_buildconfig

    - name: Wait for anarchy-test-server build
      k8s_facts:
        api_version: build.openshift.io/v1
        kind: Build
        name: anarchy-test-server-{{ anarchy_operator_test_buildconfig.resources[0].status.lastVersion }}
        namespace: "{{ anarchy_operator_test_namespace }}"
      register: anarchy_operator_test_build
      until: anarchy_operator_test_build.resources[0].status.phase == 'Complete'
      retries: 30
      delay: 10

    - name: Scale down anarchy-test-server
      command: oc scale deployment -n {{ anarchy_operator_test_namespace | quote }} anarchy-test-server --replicas=0
      #k8s_scale:
      #  api_version: extensions/v1beta1
      #  kind: Deployment
      #  name: anarchy-test-server
      #  namespace: "{{ anarchy_operator_test_namespace }}"
      #  replicas: 0

    - name: Pause for scale-down
      pause:
        seconds: 5

    - name: Scale up anarchy-test-server
      command: oc scale deployment -n {{ anarchy_operator_test_namespace | quote }} anarchy-test-server --replicas=1
      #k8s_scale:
      #  api_version: extensions/v1beta1
      #  kind: Deployment
      #  name: anarchy-test-server
      #  namespace: "{{ anarchy_operator_test_namespace }}"
      #  replicas: 1
      #  wait_timeout: 60

  - name: Scale down anarchy-operator
    command: oc scale deployment -n {{ anarchy_operator_namespace | quote }} anarchy-operator --replicas=0
    when: restart_anarchy_operator | bool
    #k8s_scale:
    #  api_version: extensions/v1beta1
    #  kind: Deployment
    #  name: anarchy-operator
    #  namespace: "{{ anarchy_operator_namespace }}"
    #  replicas: 0

  - name: Scale down anarchy-runner
    command: oc scale deployment -n {{ anarchy_operator_namespace | quote }} anarchy-runner --replicas=0
    when: restart_anarchy_runner | bool
    #k8s_scale:
    #  api_version: extensions/v1beta1
    #  kind: Deployment
    #  name: anarchy-runner
    #  namespace: "{{ anarchy_operator_namespace }}"
    #  replicas: 0

  - name: Wait for anarchy-operator scale down
    k8s_facts:
      api_version: v1
      kind: Pod
      namespace: "{{ anarchy_operator_namespace }}"
      label_selectors:
      - name=anarchy-operator
    when: restart_anarchy_operator | bool
    register: get_anarchy_operator_pod
    until: get_anarchy_operator_pod.resources | length == 0
    retries: 30
    delay: 5

  - name: Wait for anarchy-runner scale down
    k8s_facts:
      api_version: v1
      kind: Pod
      namespace: "{{ anarchy_operator_namespace }}"
      label_selectors:
      - name=anarchy-runner
    when: restart_anarchy_runner | bool
    register: get_anarchy_runner_pod
    until: get_anarchy_runner_pod.resources | length == 0
    retries: 30
    delay: 5

  - name: Get test subjects
    k8s_facts:
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      namespace: "{{ anarchy_operator_namespace }}"
      label_selectors:
      - governor=test
    register: anarchy_subjects

  - name: Remove finalizer from test anarchy subjects
    k8s:
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      name: "{{ anarchy_subject.metadata.name }}"
      namespace: "{{ anarchy_subject.metadata.namespace }}"
      merge_type: merge
      definition:
        metadata:
          finalizers: []
    loop: "{{ anarchy_subjects.resources }}"
    loop_control:
      label: "{{ anarchy_subject.metadata.name }}"
      loop_var: anarchy_subject

  - name: Remove test subjects
    command: >-
      {{ oc_cmd }} delete anarchysubject -l governor=test
      -n {{ anarchy_operator_namespace | quote }}

  - name: Remove test AnarchyGovernor
    k8s:
      state: absent
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchyGovernor
      name: test
      namespace: "{{ anarchy_operator_namespace }}"

  - name: Remove test-new AnarchyGovernor
    k8s:
      state: absent
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchyGovernor
      name: test-new
      namespace: "{{ anarchy_operator_namespace }}"

  - name: Create test AnarchyGovernor
    k8s:
      state: present
      definition: "{{ lookup('template', 'test-governor.yaml.j2') | from_yaml }}"
    vars:
      anarchy_governor_name: test

  - when: not local_test | bool
    block:
    - name: Scale up anarchy-operator
      command: >-
        oc scale deployment -n {{ anarchy_operator_namespace | quote }}
        anarchy-operator --replicas=1
      when: restart_anarchy_operator | bool

    - name: Pause for anarchy-operator start-up
      pause:
        seconds: 40
      when: restart_anarchy_runner | bool or restart_anarchy_operator | bool

  - name: Create AnarchySubject test-1
    k8s:
      state: present
      definition:
        apiVersion: anarchy.gpte.redhat.com/v1
        kind: AnarchySubject
        metadata:
          name: test-1
          namespace: "{{ anarchy_operator_namespace }}"
          labels:
            governor: test
        spec:
          governor: test
          vars:
            desired_state: started
            job_vars:
              test_subject_var: test-1

  - name: Pause for provision start
    pause:
      seconds: 40

  - name: Get test-1 provision action
    k8s_facts:
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchyAction
      label_selectors:
      - anarchy.gpte.redhat.com/action=provision
      - anarchy.gpte.redhat.com/subject=test-1
    register: test_1_provision

  - name: Assert that exactly one provision action for test-1 was found
    assert:
      that:
      - test_1_provision.resources | length == 1
      fail_msg: One test-1 provision action not found
      success_msg: One test-1 provision action found

  - name: Check test-1 provision action
    assert:
      that:
      - action.spec.action == 'provision'
      - action.status.callbackEvents | length >= 1
      - action.status.callbackEvents[0].name == 'started'
      fail_msg: test-1 provision not started
      success_msg: test-1 provision not found started
    vars:
      action: "{{ test_1_provision.resources[0] }}"

  - name: Pause for provision completion
    pause:
      seconds: 20

  - name: Get test-1 provision action
    k8s_facts:
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchyAction
      namespace: "{{ anarchy_operator_namespace }}"
      label_selectors:
      - anarchy.gpte.redhat.com/action=provision
      - anarchy.gpte.redhat.com/subject=test-1
    register: test_1_provision

  - name: Assert that exactly one provision action for test-1 was found
    assert:
      that:
      - test_1_provision.resources | length == 1
      fail_msg: One test-1 provision action not found
      success_msg: One test-1 provision action found

  - name: Check test-1 provision action
    assert:
      that:
      - action.spec.action == 'provision'
      - action.status.callbackEvents | length == 2
      - action.status.callbackEvents[1].name == 'complete'
      fail_msg: test-1 provision not complete
      success_msg: test-1 provision complete
    vars:
      action: "{{ test_1_provision.resources[0] }}"

  - name: Get test-1 subject
    k8s_facts:
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      name: test-1
      namespace: "{{ anarchy_operator_namespace }}"
    register: test_1_subject

  - name: Check test-1 subject
    assert:
      that:
      - subject.metadata.labels.state == 'started'
      - subject.spec.vars.current_state == 'started'
      fail_msg: test-1 subject not defined as expected
      success_msg: test-1 subject defined as expected
    vars:
      subject: "{{ test_1_subject.resources[0] }}"

  - name: Stop test-1 subject
    k8s:
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      name: test-1
      namespace: "{{ anarchy_operator_namespace }}"
      merge_type: merge
      definition:
        spec:
          vars:
            desired_state: stopped

  - name: Pause for stop completion
    pause:
      seconds: 40

  - name: Get test-1 subject
    k8s_facts:
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      name: test-1
      namespace: "{{ anarchy_operator_namespace }}"
    register: test_1_subject

  - name: Check test-1 subject stopped
    assert:
      that:
      - subject.metadata.labels.state == 'stopped'
      - subject.spec.vars.current_state == 'stopped'
      fail_msg: test-1 subject not defined as expected
      success_msg: test-1 subject defined as expected
    vars:
      subject: "{{ test_1_subject.resources[0] }}"

  - name: Start test-1 subject
    k8s:
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      name: test-1
      namespace: "{{ anarchy_operator_namespace }}"
      merge_type: merge
      definition:
        spec:
          vars:
            desired_state: started

  - name: Pause for re-start completion
    pause:
      seconds: 40

  - name: Get test-1 subject
    k8s_facts:
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      name: test-1
      namespace: "{{ anarchy_operator_namespace }}"
    register: test_1_subject

  - name: Check test-1 subject re-started
    assert:
      that:
      - subject.metadata.labels.state == 'started'
      - subject.spec.vars.current_state == 'started'
      fail_msg: test-1 subject not defined as expected
      success_msg: test-1 subject defined as expected
    vars:
      subject: "{{ test_1_subject.resources[0] }}"

  - name: Delete test-1 subject
    k8s:
      state: absent
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      name: test-1
      namespace: "{{ anarchy_operator_namespace }}"

  - name: Pause for delete completion
    pause:
      seconds: 40

  - name: Get test-1 subject
    k8s_facts:
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      namespace: "{{ anarchy_operator_namespace }}"
      name: test-1
    register: test_1_subject

  - name: Check test-1 subject deletion
    assert:
      that:
      - test_1_subject.resources|length == 0
      fail_msg: test-1 subject not deleted
      success_msg: test-1 subject delete completed
