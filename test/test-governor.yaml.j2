---
apiVersion: anarchy.gpte.redhat.com/v1
kind: AnarchyGovernor
metadata:
  name: {{ anarchy_governor_name }}
  namespace: {{ anarchy_operator_namespace | to_json }}
spec:
  ansibleGalaxyRequirements:
    collections: []
    roles: []
  runner: default
  vars:
    babylon_tower_hostname: {{ test_api_server_hostname | to_json }}
{% raw %}
    poolboy_resource_index: >-
      {{ anarchy_subject.metadata.annotations['poolboy.gpte.redhat.com/resource-index'] | default('') }}
    poolboy_resource_claim_name: >-
      {{ anarchy_subject.metadata.annotations['poolboy.gpte.redhat.com/resource-claim-name'] | default('') }}
    poolboy_resource_claim_namespace: >-
      {{ anarchy_subject.metadata.annotations['poolboy.gpte.redhat.com/resource-claim-namespace'] | default('') }}
    poolboy_resource_handle_name: >-
      {{ anarchy_subject.metadata.annotations['poolboy.gpte.redhat.com/resource-handle-name'] | default('') }}
    poolboy_resource_handle_namespace: >-
      {{ anarchy_subject.metadata.annotations['poolboy.gpte.redhat.com/resource-handle-namespace'] | default('') }}
    job_vars:
      check_late_variable_binding: "{{ this_variable_not_defined }}"
      cloud_provider: ec2
      __meta__:
        tower:
          organization: test

  varSecrets:
  - name: test-api-creds
    var: babylon_tower
  - name: test-aws-creds
    var: job_vars

  subjectEventHandlers:
    create:
      tasks:
      - name: Set state provision-scheduled
        anarchy_subject_update:
          metadata:
            labels:
              state: provision-scheduled
          spec:
            vars:
              current_state: provision-scheduled
      - name: Start Provision
        anarchy_schedule_action:
          action: provision
    update:
      tasks:
      - when:
        - current_state == 'stopped'
        - desired_state == 'started'
        block:
        - name: Set state start-scheduled
          anarchy_subject_update:
            metadata:
              labels:
                state: start-scheduled
            spec:
              vars:
                current_state: start-scheduled
        - name: Schedule start
          anarchy_schedule_action:
            action: start
      - when:
        - current_state == 'started'
        - desired_state == 'stopped'
        block:
        - name: Set state stop-scheduled
          anarchy_subject_update:
            metadata:
              labels:
                state: stop-scheduled
            spec:
              vars:
                current_state: stop-scheduled
        - name: Schedule stop
          anarchy_schedule_action:
            action: stop
    delete:
      tasks:
      - name: Schedule destroy
        anarchy_schedule_action:
          action: destroy

  actions:
    provision:
      tasks:
      - name: Call API
        uri:
          url: https://{% endraw %}{{ test_api_server_hostname }}{% raw %}/api/v2/job_templates/job-runner/launch/
          url_username: "{{ babylon_tower.user }}"
          url_password: "{{ babylon_tower.password }}"
          validate_certs: false
          method: POST
          return_content: true
          body_format: json
          body:
            extra_vars:
              job_vars: >-
                {{ vars.anarchy_subject.vars.job_vars | default({})
                 | combine(vars.anarchy_governor.vars.job_vars, recursive=True)
                 | combine({
                   'ACTION': 'provision',
                   '__meta__': {
                     'deployer': {'entry_point': 'ansible/main.yml'},
                     'tower': {'action': 'provision'},
                     'callback': {
                       'token': anarchy_action_callback_token,
                       'url': anarchy_action_callback_url
                     }
                   }
                 }, recursive=True)
                }}
        ignore_errors: true
        register: r_api_response

      callbackHandlers:
        started:
          tasks:
          - name: Set state provisioning
            anarchy_subject_update:
              metadata:
                labels:
                  state: provisioning
              spec:
                vars:
                  current_state: provisioning
        complete:
          tasks:
          - name: Set state started
            anarchy_subject_update:
              metadata:
                labels:
                  state: started
              spec:
                vars:
                  current_state: started
          - name: Schedule stop
            anarchy_schedule_action:
              action: stop
              after: 8h
          - name: Schedule destroy
            anarchy_schedule_action:
              action: destroy
              after: 6d

    stop:
      tasks:
      - name: Call API for stop
        uri:
          url: https://{% endraw %}{{ test_api_server_hostname }}{% raw %}/api/v2/job_templates/job-runner/launch/
          url_username: "{{ babylon_tower.user }}"
          url_password: "{{ babylon_tower.password }}"
          validate_certs: false
          method: POST
          return_content: true
          body_format: json
          body:
            extra_vars:
              job_vars: >-
                {{ vars.anarchy_subject.vars.job_vars | default({})
                 | combine(vars.anarchy_governor.vars.job_vars, recursive=True)
                 | combine({
                   'ACTION': 'stop',
                   '__meta__': {
                     'deployer': {'entry_point': 'ansible/lifecycle.yml'},
                     'tower': {'action': 'stop'},
                     'callback': {
                       'token': anarchy_action_callback_token,
                       'url': anarchy_action_callback_url
                     }
                   }
                 }, recursive=True)
                }}
        ignore_errors: true
        register: r_api_response

      callbackHandlers:
        started:
          tasks:
          - name: Set state stopping
            anarchy_subject_update:
              spec:
                vars:
                  desired_state: stopped
              metadata:
                labels:
                  state: stopping
              spec:
                vars:
                  current_state: stopping
          - name: Update desired_state stopped in subject resource handle
            when:
            - poolboy_resource_handle_name != ''
            - poolboy_resource_handle_namespace != ''
            command: >-
              oc patch resourcehandles.poolboy.gpte.redhat.com --type=json
              -n {{ poolboy_resource_handle_namespace | quote }}
              {{ poolboy_resource_handle_name | quote }}
              --patch={{ json_patch | to_json | quote }}
            vars:
              json_patch:
              - op: replace
                path: /spec/resources/{{ poolboy_resource_index }}/template/spec/vars/desired_state
                value: stopped
          - name: Update desired_state stopped in subject resource claim
            when:
            - poolboy_resource_claim_name != ''
            - poolboy_resource_claim_namespace != ''
            command: >-
              oc patch resourceclaims.poolboy.gpte.redhat.com --type=json
              -n {{ poolboy_resource_claim_namespace | quote }}
              {{ poolboy_resource_claim_name | quote }}
              --patch={{ json_patch | to_json | quote }}
            vars:
              json_patch:
              - op: replace
                path: /spec/resources/{{ poolboy_resource_index }}/template/spec/vars/desired_state
                value: stopped
        complete:
          tasks:
          - name: Set state stopped
            anarchy_subject_update:
              metadata:
                labels:
                  state: stopped
              spec:
                vars:
                  current_state: stopped

    start:
      tasks:
      - name: Call API
        uri:
          url: https://{% endraw %}{{ test_api_server_hostname }}{% raw %}/api/v2/job_templates/job-runner/launch/
          url_username: "{{ babylon_tower.user }}"
          url_password: "{{ babylon_tower.password }}"
          validate_certs: false
          method: POST
          return_content: true
          body_format: json
          body:
            extra_vars:
              job_vars: >-
                {{ vars.anarchy_subject.vars.job_vars | default({})
                 | combine(vars.anarchy_governor.vars.job_vars, recursive=True)
                 | combine({
                   'ACTION': 'start',
                   '__meta__': {
                     'deployer': {'entry_point': 'ansible/lifecycle.yml'},
                     'tower': {'action': 'start'},
                     'callback': {
                       'token': anarchy_action_callback_token,
                       'url': anarchy_action_callback_url
                     }
                   }
                 }, recursive=True)
                }}
        ignore_errors: true
        register: r_api_response

      callbackHandlers:
        started:
          tasks:
          - name: Set state starting
            anarchy_subject_update:
              metadata:
                labels:
                  state: starting
              spec:
                vars:
                  current_state: starting
        complete:
          tasks:
          - name: Set state started
            anarchy_subject_update:
              metadata:
                labels:
                  state: started
              spec:
                vars:
                  current_state: started
          - name: Schedule stop
            anarchy_schedule_action:
              action: stop
              after: 8h

    destroy:
      tasks:
      - name: Call API
        uri:
          url: https://{% endraw %}{{ test_api_server_hostname }}{% raw %}/api/v2/job_templates/job-runner/launch/
          url_username: "{{ babylon_tower.user }}"
          url_password: "{{ babylon_tower.password }}"
          validate_certs: false
          method: POST
          return_content: true
          body_format: json
          body:
            extra_vars:
              job_vars: >-
                {{ vars.anarchy_subject.vars.job_vars | default({})
                 | combine(vars.anarchy_governor.vars.job_vars, recursive=True)
                 | combine({
                   'ACTION': 'destroy',
                   '__meta__': {
                     'deployer': {'entry_point': 'ansible/destroy.yml'},
                     'tower': {'action': 'destroy'},
                     'callback': {
                       'token': anarchy_action_callback_token,
                       'url': anarchy_action_callback_url
                     }
                   }
                 }, recursive=True)
                }}
        ignore_errors: true
        register: r_api_response

      callbackHandlers:
        complete:
          tasks:
          - name: Delete anarchy subject
            anarchy_subject_delete:
              remove_finalizers: true
          - name: Delete resource handle
            when:
            - poolboy_resource_handle_name != ''
            - poolboy_resource_handle_namespace != ''
            k8s:
              api_version: poolboy.gpte.redhat.com/v1
              kind: ResourceHandle
              name: "{{ poolboy_resource_handle_name }}"
              namespace: "{{ poolboy_resource_handle_namespace }}"
              state: absent
          - name: Delete resource claim
            when:
            - poolboy_resource_claim_name != ''
            - poolboy_resource_claim_namespace != ''
            k8s:
              api_version: poolboy.gpte.redhat.com/v1
              kind: ResourceClaim
              name: "{{ poolboy_resource_claim_name }}"
              namespace: "{{ poolboy_resource_claim_namespace }}"
              state: absent
{% endraw %}
